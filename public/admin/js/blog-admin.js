// –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–ª–æ–≥–æ–º –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ

let currentPage = 1;
let totalPages = 1;

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥—É
async function loadBlogPosts(page = 1) {
    const tbody = document.getElementById('blogTableBody');
    const errorDiv = document.getElementById('error-message');

    errorDiv.classList.add('hidden');

    try {
        const response = await authFetch(`/api/blog/admin/posts?page=${page}&limit=20`);

        if (!response || !response.ok) {
            throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π');
        }

        const data = await response.json();

        currentPage = data.currentPage;
        totalPages = data.totalPages;

        renderBlogTable(data.posts);
        renderPagination(data.totalPages, data.currentPage);

    } catch (error) {
        console.error('Load posts error:', error);
        errorDiv.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π';
        errorDiv.classList.remove('hidden');
        tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: var(--spacing-xl);">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</td></tr>';
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–∞—Ç–µ–π
function renderBlogTable(posts) {
    const tbody = document.getElementById('blogTableBody');

    if (!posts || posts.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: var(--spacing-xl);">–°—Ç–∞—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à—É —Å—Ç–∞—Ç—Ç—é!</td></tr>';
        return;
    }

    tbody.innerHTML = posts.map(post => `
        <tr>
            <td><strong>${escapeHtml(post.title)}</strong></td>
            <td>${getCategoryName(post.category)}</td>
            <td>
                <span style="padding: 4px 8px; border-radius: 4px; font-size: 0.875rem; background-color: ${post.status === 'published' ? 'rgba(16, 185, 129, 0.1)' : 'rgba(245, 158, 11, 0.1)'}; color: ${post.status === 'published' ? '#10B981' : '#F59E0B'};">
                    ${post.status === 'published' ? '‚úì –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ' : 'üìù –ß–µ—Ä–Ω–µ—Ç–∫–∞'}
                </span>
            </td>
            <td>${post.views || 0}</td>
            <td>${formatDate(post.createdAt)}</td>
            <td>
                <button onclick="editPost('${post._id}')" class="btn-outline" style="padding: 0.5rem 1rem; margin-right: 0.5rem;">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                <button onclick="deletePost('${post._id}', '${escapeHtml(post.title)}')" class="btn-danger" style="padding: 0.5rem 1rem;">–í–∏–¥–∞–ª–∏—Ç–∏</button>
            </td>
        </tr>
    `).join('');
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
function renderPagination(total, current) {
    const pagination = document.getElementById('pagination');

    if (total <= 1) {
        pagination.innerHTML = '';
        return;
    }

    let html = '';

    html += `<button ${current === 1 ? 'disabled' : ''} onclick="loadBlogPosts(${current - 1})">‚Äπ –ü–æ–ø–µ—Ä–µ–¥–Ω—è</button>`;

    const maxVisible = 5;
    let start = Math.max(1, current - Math.floor(maxVisible / 2));
    let end = Math.min(total, start + maxVisible - 1);

    if (end - start < maxVisible - 1) {
        start = Math.max(1, end - maxVisible + 1);
    }

    if (start > 1) {
        html += `<button onclick="loadBlogPosts(1)">1</button>`;
        if (start > 2) html += `<span style="padding: 0 0.5rem;">...</span>`;
    }

    for (let i = start; i <= end; i++) {
        html += `<button class="${i === current ? 'active' : ''}" onclick="loadBlogPosts(${i})">${i}</button>`;
    }

    if (end < total) {
        if (end < total - 1) html += `<span style="padding: 0 0.5rem;">...</span>`;
        html += `<button onclick="loadBlogPosts(${total})">${total}</button>`;
    }

    html += `<button ${current === total ? 'disabled' : ''} onclick="loadBlogPosts(${current + 1})">–ù–∞—Å—Ç—É–ø–Ω–∞ ‚Ä∫</button>`;

    pagination.innerHTML = html;
}

// –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ
function editPost(postId) {
    window.location.href = `/admin/blog-editor.html?id=${postId}`;
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ
async function deletePost(postId, title) {
    if (!confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é "${title}"?`)) {
        return;
    }

    const errorDiv = document.getElementById('error-message');
    const successDiv = document.getElementById('success-message');

    try {
        const response = await authFetch(`/api/blog/admin/posts/${postId}`, {
            method: 'DELETE'
        });

        if (!response || !response.ok) {
            throw new Error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ');
        }

        successDiv.textContent = '–°—Ç–∞—Ç—Ç—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ';
        successDiv.classList.remove('hidden');
        setTimeout(() => successDiv.classList.add('hidden'), 3000);

        loadBlogPosts(currentPage);

    } catch (error) {
        console.error('Delete post error:', error);
        errorDiv.textContent = '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ';
        errorDiv.classList.remove('hidden');
    }
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('uk-UA', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
}

// –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function getCategoryName(category) {
    const categories = {
        'tips': '–ü–æ—Ä–∞–¥–∏',
        'news': '–ù–æ–≤–∏–Ω–∏',
        'guides': '–ì–∞–π–¥–∏',
        'other': '–Ü–Ω—à–µ'
    };
    return categories[category] || category;
}

// Escape HTML
function escapeHtml(text) {
    if (!text) return '';
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener('DOMContentLoaded', () => {
    checkAuth();
    loadBlogPosts(1);
});
